#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime


def run_command(command):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print("STDOUT:")
        print(result.stdout)
    
    if result.stderr:
        print("STDERR:")
        print(result.stderr)
    
    return result.returncode == 0


def create_reports_dir():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    reports_dir = "../reports"
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {reports_dir}")


def run_tests(test_type="all", parallel=False, generate_reports=True):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    create_reports_dir()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ pytest
    pytest_options = ["pytest", "-v"]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if test_type == "smoke":
        pytest_options.extend(["-m", "smoke"])
    elif test_type == "login":
        pytest_options.extend(["-m", "login"])
    elif test_type == "registration":
        pytest_options.extend(["-m", "registration"])
    elif test_type == "home":
        pytest_options.extend(["-m", "home"])
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if parallel:
        pytest_options.extend(["-n", "auto"])
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    if generate_reports:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pytest_options.extend([
            "--html", f"reports/report_{timestamp}.html",
            "--self-contained-html",
            "--junitxml", f"reports/junit_{timestamp}.xml"
        ])
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    command = " ".join(pytest_options)
    success = run_command(command)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        if generate_reports:
            print(f"üìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ reports/")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ Appium")
    parser.add_argument(
        "--type", 
        choices=["all", "smoke", "login", "registration", "home"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--parallel", 
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
    )
    parser.add_argument(
        "--no-reports", 
        action="store_true",
        help="–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã"
    )
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ Appium")
    print(f"üìã –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {args.type}")
    print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {'–î–∞' if args.parallel else '–ù–µ—Ç'}")
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤: {'–ù–µ—Ç' if args.no_reports else '–î–∞'}")
    print("-" * 50)
    
    run_tests(
        test_type=args.type,
        parallel=args.parallel,
        generate_reports=not args.no_reports
    )


if __name__ == "__main__":
    main()
